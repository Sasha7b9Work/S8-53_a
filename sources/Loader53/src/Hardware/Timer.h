#pragma once 
#include "defines.h"
#include "Utils/GlobalFunctions.h"


typedef enum
{
    kPressKey,                  ///< Нужно устанавливать, когда приходит нажатие клавиши.
    kShowLevelRShift0,          ///< Нужно устанавливать, когда изменяется положение ручки смещения канала 1.
    kShowLevelRShift1,          ///< Нужно устанавливать, когда изменяется положение ручки смещения канала 2.
    kShowLevelTrigLev,          ///< Нужно устанавливать, когда изменяется положение ручки уровня синхронизации
    kNumSignalsInSec,           ///< Для установки количества считываний сигнала в секунду.
    kFlashDisplay,              ///< Таймер для мерцающих участков экрана чёрно-белого дисплея.
    kP2P,                       ///< Таймер для чтения данных в режиме поточечного вывода.
    kShowMessages,              ///< Таймер для засекания время показа информационных и предупреждающих сообщений.
    kMenuAutoHide,              ///< Таймер для отсчёта времени скрывания меню.
    kRShiftMarkersAutoHide,     ///< Таймер для отсчёта времени скрывания дополнительных боковых меток.
    kTemp,                      ///< Вспомогательный, для общих нужд.
    kStopSound,                 ///< Выключить звук
    kTemporaryPauseFPGA,        ///< Временная пауза для фиксации сигнала на экране после поворота ручек
    kTimerDrawHandFunction,     ///< Этот таймер могут использовать функции, использующие свою процедуру рисования
    TypeTimerSize               ///< Общее количество таймеров.
} TypeTimer;


/// Приостанавливает выполнение программы на timeMS микросекунд
void Timer_PauseOnTime(uint timeMS);
/// Приостанавливает выполнение программы на numTicks тиков
void Timer_PauseOnTicks(uint numTicks);
/// Функция вызывается по прерыванию системного таймера для работы таймеров. Увеличивает внутренее время таймеров на 1мс.
void Timer_Update1ms(void);
/// Функция вызывается по прерыванию системного таймера для работы таймеров. Увеличивает внутреннее время таймеров на 10мс.
void Timer_Update10ms(void);
/// Запуск таймера
void Timer_Enable(TypeTimer type,   ///< Тип таймера
                  int timeInMS,     ///< Время срабатывания таймера
                  pFuncVV func      ///< Функция, которая вызывается каждый раз, когда срабатывает таймер
                  );
/// Остановить таймер
void Timer_Disable(TypeTimer type);
/// Приостановить таймер. Запустить снова можно функцией Timer_Continue()
void Timer_Pause(TypeTimer type);
/// Продолжить работу таймера, ранее приостановленного функцией Timer_Pause()
void Timer_Continue(TypeTimer type);
/// С помощью этой функции можно узнать, работает ли таймер
bool Timer_IsRun(TypeTimer type);
/// Запускает счётчик для измерения малых отрезков времени.
void Timer_StartMultiMeasurement(void);
/// Устанавливает стартовую точку логгирования. Далее вызовы Timer_LogPoint засекают временные интервалы от это точки.
void Timer_StartLogging(void);               

uint Timer_LogPointUS(char *name);

uint Timer_LogPointMS(char *name);
/// Время, прошедшее с момента инициализации таймера, в секундах
//extern volatile uint gTimerMS;                  

/// Количество тиков, прошедших с момента последнего вызова функции Timer_StartMultiMeasurement().
/// В одной секунде 120.000.000 тиков. Максимальный отрезок времени, который можно отсчитать с её помощью - 35 сек.
/// Количество тиков, прошедших с момента последнего вызова функции Timer_StartMultiMeasurement(). Не более (1 << 32).
#define gTimerTics (TIM2->CNT)
