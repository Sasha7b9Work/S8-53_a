#pragma once


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SDisplay
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Режим отображения пропущенных сигналов при ограничении частоты кадров.
typedef enum
{
    Missed_Hide,    // Не выводить на экран
    Missed_Show,    // Выводить на экран
    Missed_Average  // Устреднять и выводить на экран
} MissedSignals;


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChannelX
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef enum
{
    A,
    B,
    A_B,
    Math
} Channel;

/// Режим канала по входу.
typedef enum
{
    ModeCouple_DC,      ///< Открытый вход.
    ModeCouple_AC,      ///< Закрытый вход.
    ModeCouple_GND      ///< Вход заземлён.
} ModeCouple;

/// Делитель.
typedef enum
{
    Divider_1,
    Divider_10
} Divider;

/// Масштаб по напряжению.
typedef enum
{
    Range_2mV,
    Range_5mV,
    Range_10mV,
    Range_20mV,
    Range_50mV,
    Range_100mV,
    Range_200mV,
    Range_500mV,
    Range_1V,
    Range_2V,
    Range_5V,
    Range_10V,
    Range_20V,
    RangeSize
} Range;

Range& operator++(Range &range);
Range& operator--(Range &range);

#define NumChannels 2

const char *RangeName(Range range);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Time
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/// Масштаб по времени
typedef enum
{
    TBase_2ns,
    TBase_5ns,
    TBase_10ns,
    TBase_20ns,
    TBase_50ns,
    TBase_100ns,
    TBase_200ns,
    TBase_500ns,
    TBase_1us,
    TBase_2us,
    TBase_5us,
    TBase_10us,
    TBase_20us,
    TBase_50us,
    TBase_100us,
    TBase_200us,
    TBase_500us,
    TBase_1ms,
    TBase_2ms,
    TBase_5ms,
    TBase_10ms,
    TBase_20ms,
    TBase_50ms,
    TBase_100ms,
    TBase_200ms,
    TBase_500ms,
    TBase_1s,
    TBase_2s,
    TBase_5s,
    TBase_10s,
    TBaseSize
} TBase;

const char *TBaseName(TBase tBase);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Measures
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Сжимать ли сигналы при выводе измерений.
typedef enum
{
    ModeViewSignals_AsIs,       // Показывать сигналы как есть
    ModeViewSignals_Compress    // Сжимать сетку с сигналами
} ModeViewSignals;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Math
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef enum
{
    ScaleMath_Channel0,     // Масштаб берётся из канала 1
    ScaleMath_Channel1,     // Масштаб берётся из канала 2
    ScaleMath_Hand          // Масштаб задаётся вручную.
} ScaleMath;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Курсоры
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Каким курсором управлять.
typedef enum
{
    CursCntrl_1,            ///< первым.
    CursCntrl_2,            ///< вторым.
    CursCntrl_1_2,          ///< обоими.
    CursCntrl_Disable       ///< никаким.
} CursCntrl;


/// Дискретность перемещения курсоров.
typedef enum
{
    CursMovement_Points,    ///< по точкам.
    CursMovement_Percents   ///< по процентам.
} CursMovement;

/// Какие курсоры сейчас активны. Какие активны, те и будут перемещаться по вращению ручки УСТАНОВКА.
typedef enum
{
    CursActive_U,
    CursActive_T,
    CursActive_None
} CursActive;

/// Режим слежения курсоров.
typedef enum
{
    CursLookMode_None,      ///< Курсоры не следят.
    CursLookMode_Voltage,   ///< Курсоры следят за напряжением автоматически.
    CursLookMode_Time,      ///< Курсоры следят за временем автоматически.
    CursLookMode_Both       ///< Курсоры следят за временем и напряжением, в зависимости от того, какой курсоры вращали последним.
} CursLookMode;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Service
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Язык меню
typedef enum
{
    Russian,    // Русский
    English     // Английский
} Language;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Debug
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Тип балансировки АЦП каналов.
// Дело в том, что уровни АЦП не совпадают из-за отличия характеристик ( ? ), поэтому мы вводим дополнительное смещение для одного из АЦП канала.
typedef enum
{
    BalanceADC_Disable,     // Балансировка выключена.
    BalanceADC_Settings,    // Используются значения балансировки, которые получены автоматически.
    BalanceADC_Hand         // Используются значения балансировки, заданные вручную.
} BalanceADCtype;

// Тип растяжки АЦП
typedef enum
{
    StretchADC_Disable,
    StretchADC_Settings,
    StretchADC_Hand
} StretchADCtype;

// Тип дополнительного смещения
typedef enum
{
    RShiftADC_Disable,
    RShiftADC_Settings,
    RShiftADC_Hand
} RShiftADCtype;
