 /** @file FPGA_Types.h
    @brief Файл содержит макросы, адреса и и константы, необходимые для работы с прибором
    @verbatim
    После каждого включения прибора необходимо выполнять засылки 2-15
    Засылка WR_START выполняется каждый раз для запуска цикла преобразования
    Засылка WR_STOP выполняется для прекращения цикла преобразования перед новым циклом


    Для управления режимами каналов и синхронизации, смещениями каналов и синхронизации используются выводы PG2, PG3, PG5, PG7
    PG5 - выбор режимов (чипселект)
    PG7 - выбор смещений (чипселект)
    PG2 - тактовые импульсы
    PG3 - данные

    Активный уровень выбора - низкий.
    Перед подачей чипселекта уровень тактового импульса должен быть равен нулю.
    Данные передаются по срезу тактового импульса.
    Микросхема AD5314.
                            __      __      __      __         __      __      __      __      __
                           /  \    /  \    /  \    /  \       /  \    /  \    /  \    /  \    /  \
    PG2       ____________/    \__/    \__/    \__/    \__/  /    \__/    \__/    \__/    \__/    \_____________
              _________                                                                                _________
    PG5 (PG7)          \___________________________________   ________________________________________/
                             ____    ____    ____    ____       ____    ____    ____    ____    ____                                                              
    PG3       ______________/    \__/    \__/    \__/    \_   _/    \__/    \__/    \__/    \__/    \___________
                            \____/  \____/  \____/  \____/     \____/  \____/  \____/  \____/  \____/                                                    
                             DB15    DB14    DB13    DB12       DB4     DB3     DB2     DB1     DB0

    @endverbatim 
*/

#pragma once


#define RShiftMin   20          //    Минимальное значение смещения канала по напряжению, засылаемое в аналоговую часть. Соответствует смещению 10 клеток вниз от центральной линии.
#define RShiftZero  500         //    Среднее значение смещения канала по напряжению, засылаемое в аналоговую часть. Соответствует расположению марера по центру экрана.
#define RShiftMax   980         //    Максимальное значение смещения канала по напряжению, засылаемое в аналоговую часть. Соответствует смещению 10 клеток вверх от центральной лиини.
#define STEP_RSHIFT (((RShiftMax - RShiftMin) / 24) / GRID_DELTA)   ///< На столько единиц нужно изменить значение смещения, чтобы маркер смещения по напряжению передвинулся на одну точку.

#define TrigLevMin  RShiftMin   //    Минимальное значение уровня синхронизации, засылаемое в прибор.
#define TrigLevMax  RShiftMax   //    Максимальное значечение уровня синхронизации, засылаемое в аналоговую часть.
#define TrigLevZero RShiftZero  //    Нулевое значение уровня синхронизации, засылаемое в прибор. Маркер синхронизации при этом находитися на одном уровне с маркером смещения по напряжению.

#define TShiftMax   16383       //    Максимально значение задержки по времени относительно точки синхронизации, засылаемое в альтеру.

///<    Это значение входного сигнала, считанное с АЦП, соответствует нижней границе сетки (-5 клеток от центра). Если значение == 0, значит, его нет. Это нужно для режимов рандомизатора и поточечного вывода p2p, а также для tShift ранее считанного сигнала.
#define MIN_VALUE   27
#define AVE_VALUE   127         ///<    Это значение входного сигнала, считанное с АЦП, соответствует центру сетки. Если значение == 0, значит, его нет. Это нужно для режимов рандомизатора и поточечного вывода p2p, а также для tShift ранее считанного сигнала.
#define MAX_VALUE   227         ///<    Это значение входного сигнала, считанное с АЦП, соответствует верхней границе сетки (+5 клеток от центра). Если значение == 0, значит, его нет. Это нужно для режимов рандомизатора и поточечного вывода p2p, а также для tShift ранее считанного сигнала.
#define MIN_VALUE_SCREEN 0
#define MAX_VALUE_SCREEN 200

#define MIN_TBASE_PEC_DEAT  TBase_500ns     ///< Минимальный масштаб по времени, при котором возможно включение режима пикового детектора.
#define MIN_TBASE_P2P       TBase_20ms      ///< С этого значения tBase должен включаться режим поточечного вывода.

#define FPGA_MAX_POINTS     1024            
#define FPGA_MAX_POINTS_FOR_CALCULATE 900


#define WR_START        (ADDR_FPGA)                 ///<    Запуск цикла измерения. Для запуска нужно записать 1.
#define WR_RAZVERTKA    (ADDR_FPGA + 4)             ///<    Установка частоты синхронизации. Используется в LoadTBase().
#define WR_PRED_LOW     (ADDR_FPGA + 5)             ///<    Младший байт величины предзапуска. Используется совместно с WR_PRED_HI, WR_POST_LOW, WR_POST_HI для загрузки смещения по времени в ПЛИС. Используется в LoadTShift().
#define WR_PRED_HI      (ADDR_FPGA + 6)             ///<    Старший байт величины предзапуска. Используется совместно с WR_PRED_LOW, WR_POST_LOW, WR_POST_HI для загрузки смещения по времени в ПЛИС. Используется в LoadTShift().
#define WR_POST_LOW     (ADDR_FPGA + 7)             ///<    Младший байт величины послезапуска. Используется совместно с WR_PRED_LOW, WR_PRED_HI, WR_PRED_POST для загрузки смещения по времени в ПЛИС. Используется в LoadTShift().
#define WR_POST_HI      (ADDR_FPGA + 8)             ///<    Cтарший байт величины послезапуска. Используется совместно с WR_PRED_LOW, WR_PRED_HI, WR_POST_LOW для загрузки смещения по времени в ПЛИС. Используется в LoadTShift().
                                                    /**     @brief Выбор фронта/спада импульса синхронизации и режимов AUTO/RUN.
                                                            @verbatim
                                                            D0 - фронт/спад,\n
                                                            D1 - AUTO/RUN.\n
                                                            Используется в LoadTrigPolarity(). 
                                                            @endverbatim */
#define WR_TRIG_F       (ADDR_FPGA + 9)
#define WR_CAL_A        (ADDR_FPGA + 12)            ///<    Калибровочный коэффициент канала 1.
#define WR_CAL_B        (ADDR_FPGA + 13)            ///<    Калибровочный коэффициент канала 2.
                                                    /**     @brief Управление калибратором, пиковым детектором и рандомизатором.
                                                            @verbatim
                                                            D0 - нужно устанавливать в 1 при рандомизаторных развёртках для прореживания частоты,\n
                                                            D1 - пиковый детектор вкл./откл. Режим пикового д
                                                            D2, D3 - калибратор : D2 == 1 - 1кГц, D3 == 1 - пост, D2 == 0, D3 == 0 - ОВ
                                                            @endverbatim */
#define WR_UPR          (ADDR_FPGA + 14)
                                                    /** @brief Принудительное завершение цикла измерения. 
                                                        @verbatim
                                                        Для того, чтобы изменить режим работы ПЛИС, когда идёт цикл измерений, сначала нужно заслать по адресу WR_STOP 1, потом новые установки, а затем снова дать команду WR_START.
                                                        @endverbatim */
#define WR_STOP          (ADDR_FPGA + 15)            


#define RD_ADC_A1       (ADDR_FPGA + 0x10)          ///<    Чтение из памяти АЦП канала 1 1-го байта.
#define RD_ADC_A2       (ADDR_FPGA + 0x11)          ///<    Чтение из памяти АЦП канала 1 2-го байта.
#define RD_ADC_B1       (ADDR_FPGA + 0x12)          ///<    Чтение из памяти АЦП канала 2 1-го байта.
#define RD_ADC_B2       (ADDR_FPGA + 0x13)          ///<    Чтение из памяти АЦП канала 2 2-го байта.
                                                    /**     @brief Чтение установленных флагов.
                                                            @verbatim
                                                            D0 - флаг готовности данных,\n
                                                            D1 - флаг синхронизации,\n
                                                            D2 -\n
                                                            D3 - флаг готовности очередной точки для поточечного вывода,\n
                                                            D4 - завершение счёта частоты,\n
                                                            D5 - завершение измерения периода,\n
                                                            D6 - признак того, что нужно смещать сигналы на 1 точку в сторону. 
                                                            @endverbatim */
#define RD_FL           (ADDR_FPGA + 0x16)
#define BIT_DATA_READY          0
#define BIT_TRIG                1
#define BIT_POINT_READY         3
#define BIT_FREQ_READY          4
#define BIT_PERIOD_READY        5
#define BIT_SIGN_SHIFT_POINT    6


#define RD_LAST_RECORD_LOW  (ADDR_FPGA + 0x17)      ///<    Младший байт адреса последней записи. Старший находится в RD_LAST_RECORD_HI. Используется в режиме поточечного вывода, чтобы не считывать все точки, когда пользователю не нужно 1024. Это ускоряет работу.
#define RD_LAST_RECORD_HI   (ADDR_FPGA + 0x18)      ///<    Старший байт адреса последней записи. Младший находится в RD_LAST_RECORD_LOW. Используется в режиме поточечного вывода, чтобы не считывать все точки, когда пользователю не нужно 1024. Это ускоряет работу.
#define WR_ADD_RSHIFT_DAC2  (ADDR_FPGA + 0x1b)      ///<    Дополнительное смещение АЦП 2-го канал. Т.к. один канал считывают два АЦП поочерёдно и они разбалансированы, необходимо сюда записывать значение для компенсацип разбалансировки.
#define WR_ADD_RSHIFT_DAC1  (ADDR_FPGA + 0x1c)      ///<    Дополнительное смещение АЦП 1-го канал. Т.к. один канал считывают два АЦП поочерёдно и они разбалансированы, необходимо сюда записывать значение для компенсацип разбалансировки.

#define RD_ADDR_PERIOD_LOW_LOW  (ADDR_FPGA + 0x19)  ///<    0-й байт замеренного значения частоты. Признак того, что счёт частоты завершён, находится в D4 RD_FL.
#define RD_ADDR_PERIOD_LOW      (ADDR_FPGA + 0x1a)  ///<    1-й байт замеренного значения частоты. Признак того, что счёт частоты завершён, находится в D4 RD_FL.
#define RD_ADDR_PERIOD_MID      (ADDR_FPGA + 0x1b)  ///<    2-й байт замеренного значения частоты. Признак того, что счёт частоты завершён, находится в D4 RD_FL.
#define RD_ADDR_PERIOD_HI       (ADDR_FPGA + 0x1c)  ///<    3-й байт замеренного значения частоты. Признак того, что счёт частоты завершён, находится в D4 RD_FL.


#define RD_ADDR_FREQ_LOW    (ADDR_FPGA + 0x1d)      ///<    0-й байт замеренного значения периода. Признак того, что счёт периода завершён, находится в D5 RD_FL.
#define RD_ADDR_FREQ_MID    (ADDR_FPGA + 0x1e)      ///<    1-й байт замеренного значения периода. Признак того, что счёт периода завершён, находится в D5 RD_FL.
#define RD_ADDR_FREQ_HI     (ADDR_FPGA + 0x1f)      ///<    2-й байт замеренного значения периода. Признак того, что счёт периода завершён, находится в D5 RD_FL.

typedef enum
{
    TypeWriteAnalog_All,
    TypeWriteAnalog_Range0,
    TypeWriteAnalog_Range1,
    TypeWriteAnalog_TrigParam,
    TypeWriteAnalog_ChanParam0,
    TypeWriteAnalog_ChanParam1
} TypeWriteAnalog;

typedef enum
{
    TypeWriteDAC_RShiftA,
    TypeWriteDAC_RShiftB,
    TypeWriteDAC_TrigLev
} TypeWriteDAC;
